@model db_query_v1._0._0._1.Models.SettingsViewModel
@using Microsoft.AspNetCore.Identity
@using db_query_v1._0._0._1.Models
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Settings";
    var user = SignInManager.IsSignedIn(User)
        ? await UserManager.GetUserAsync(User)
        : null;
}

<link rel="stylesheet" href="~/css/settings.css" />

<div class="auth-bg">
    @if (user != null)
    {
        <div class="dropdown user-avatar-topright">
            <a href="#" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                <img src="https://ui-avatars.com/api/?name=@user.FirstName+@user.LastName&background=0D8ABC&color=fff"
                     alt="Avatar"
                     class="user-avatar" />
            </a>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                <li><a class="dropdown-item" href="@Url.Action("Settings","Account")">Settings</a></li>
                <li><a class="dropdown-item" href="@Url.Action("Upgrade","Account")">Upgrade Plan</a></li>
                <li><hr class="dropdown-divider" /></li>
                <li>
                    <form asp-controller="Account" asp-action="Logout" method="post" class="m-0">
                        <button type="submit" class="dropdown-item">Log out</button>
                    </form>
                </li>
            </ul>
        </div>
    }


    <div class="auth-card">
        <h3 class="text-center mb-4">Your Settings</h3>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">@TempData["SuccessMessage"]</div>
        }

        <form asp-action="Settings" method="post" novalidate>
            @Html.AntiForgeryToken()
            <div asp-validation-summary="All" class="text-danger mb-3"></div>

            <div class="form-floating">
                <input asp-for="FirstName" class="form-control" placeholder="First Name" />
                <label asp-for="FirstName"></label>
                <span asp-validation-for="FirstName" class="text-danger small"></span>
            </div>

            <div class="form-floating">
                <input asp-for="LastName" class="form-control" placeholder="Last Name" />
                <label asp-for="LastName"></label>
                <span asp-validation-for="LastName" class="text-danger small"></span>
            </div>

            <div class="form-floating">
                <input asp-for="Email" class="form-control" placeholder="Email" readonly />
                <label asp-for="Email"></label>
            </div>

            <div class="form-floating">
                <input asp-for="Phone" class="form-control" placeholder="Phone Number" />
                <label asp-for="Phone"></label>
                <span asp-validation-for="Phone" class="text-danger small"></span>
            </div>

            <div class="form-floating">
                <input asp-for="Address" class="form-control" placeholder="Address" />
                <label asp-for="Address"></label>
                <span asp-validation-for="Address" class="text-danger small"></span>
            </div>

            <div class="form-floating">
                <input asp-for="DateOfBirth" class="form-control" type="date" placeholder="Date of Birth" />
                <label asp-for="DateOfBirth"></label>
                <span asp-validation-for="DateOfBirth" class="text-danger small"></span>
            </div>

            @for (int i = 0; i < Model.Specializations.Count(); i++)
            {
                <div class="form-floating">
                    <input name="Specializations[@i]" value="@Model.Specializations[i]"
                           class="form-control" placeholder="Specialization @(i + 1)" />
                    <label>Specialization @(i + 1)</label>
                </div>
            }

            <button type="submit" class="btn btn-primary rounded-pill mt-3">Save Settings</button>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

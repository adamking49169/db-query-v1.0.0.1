@using Models
@model ChatModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Chat With Data";
    var user = SignInManager.IsSignedIn(User) ? await UserManager.GetUserAsync(User) : null;
}

@if (user != null)
{
    <div class="dropdown user-avatar-topright">
        <a href="#" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            <img src="https://ui-avatars.com/api/?name=@user.FirstName+@user.LastName&background=0D8ABC&color=fff"
                 alt="Avatar"
                 class="user-avatar" />
        </a>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
            <li><a class="dropdown-item" href="@Url.Action("Settings","Account")">Settings</a></li>
            <li><a class="dropdown-item" href="@Url.Action("Upgrade","Account")">Upgrade Plan</a></li>
            <li><hr class="dropdown-divider" /></li>
            <li>
                <form asp-controller="Account" asp-action="Logout" method="post" class="m-0">
                    <button type="submit" class="dropdown-item">Log out</button>
                </form>
            </li>
        </ul>
    </div>
}
<


<div class="auth-bg">
    <div class="auth-card container">
        <div class="sidebar">
            <h3>Previous Chats</h3>
            @if (Model.PreviousChats.Any() == true)
            {
                var currentUsersPreviousChats = Model.PreviousChats
                .Where(prev => prev.UserIdentityId == user.Id)
                .ToList();

                foreach (var prevChat in currentUsersPreviousChats)
                {
                    <div class="history-item">
                        @prevChat.Title (@prevChat.Date.ToLocalTime().ToString("d"))
                    </div>
                }
            }
            else
            {
                <div>No previous chats available.</div>
            }
        </div>

        <div class="main-content">
            <div class="chat-header">Chat With Data</div>
            <form method="post" asp-action="ChatWithData" asp-controller="Chat" class="chat-input">
                <div class="input-container">
                    <textarea id="UserInput" name="UserInput" placeholder="Ask a question..." required></textarea>
                    <button type="submit" class="send-button">Send</button>
                </div>

                @* Preserve history inputs *@
                @if (Model.ChatHistory != null)
                {
                    for (var i = 0; i < Model.ChatHistory.Count; i++)
                    {
                        <input type="hidden" name="ChatHistory[@i].Role" value="@Model.ChatHistory[i].Role" />
                        <input type="hidden" name="ChatHistory[@i].Content" value="@Model.ChatHistory[i].Content" />
                        <input type="hidden" name="ChatHistory[@i].Timestamp" value="@Model.ChatHistory[i].Timestamp.ToString("o")" />
                    }
                }
            </form>

            <script>
                                 // Function to set focus and move the cursor to the start
                function setFocusAndCursor() {
                    const userInput = document.getElementById("UserInput");
                    userInput.focus(); // Focus the textarea
                    // userInput.setSelectionRange(0, 0); // Move the cursor to the start of the text
                }

                // Ensure focus and cursor position when page is loaded
                document.addEventListener('DOMContentLoaded', function() {
                    setFocusAndCursor(); // Set focus and cursor to the start when the page reloads
                });

                // Set focus and cursor position after submitting the form
                document.querySelector("form").addEventListener("submit", function() {
                    setTimeout(function() {
                        setFocusAndCursor();
                    }, 0);
                });

                // Set focus and cursor position after clicking the send button
                document.querySelector('.send-button').addEventListener('click', function() {
                    const userInput = document.getElementById("UserInput");
                    setTimeout(function() {
                        setFocusAndCursor();
                    }, 0);
                });


            </script>


            @if (Model.ChatHistory?.Any() == true)
            {
                <div class="chat-history-header">Chat History</div>
                <ul class="chat-history">
                    @{
                        // ① Build pairs of (user, assistant)
                        var pairs = Model.ChatHistory
                        .Select((msg, idx) => new { msg, idx })
                        .GroupBy(x => x.idx / 2)
                        .Select(g => new
                        {
                            User = g.First().msg,
                            Assistant = g.Skip(1).FirstOrDefault()?.msg
                        })
                        .ToList();

                        // ② Reverse so newest pair is first
                        pairs.Reverse();
                    }

                    @foreach (var p in pairs)
                    {
                        <li class="chat-message">
                            <div class="avatar user">U</div>
                            <div class="chat-bubble user-message">
                                <span>@p.User.Content</span>
                                <div class="chat-meta">@p.User.Role • @p.User.Timestamp.ToLocalTime().ToString("g")</div>
                            </div>
                        </li>

                        @if (p.Assistant != null)
                        {
                            <li class="chat-message">
                                <img src="/images/navbar-brand.png" alt="User Avatar" class="avatar user" style="object-fit: cover; width: 36px; height: 36px; padding: 2px;" />
                                <div class="chat-bubble assistant-message">
                                    <span>@p.Assistant.Content</span>
                                    <div class="chat-meta">@p.Assistant.Role • @p.Assistant.Timestamp.ToLocalTime().ToString("g")</div>
                                </div>
                            </li>
                        }

                        <li class="separator"><hr class="chat-separator" /></li>
                    }
                </ul>
            }

            @if (Model.Data?.Any() == true)
            {
                <div class="chat-history-header">Data Output</div>
                <table class="table">
                    <thead>
                        <tr><th>Column</th><th>Value</th></tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model.Data)
                        {
                            <tr><td>@row.ColumnName</td><td>@row.Value</td></tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<div id="chat-with-data-root"></div>
<script>
    ReactDOM.render(
      <ChatWithData {.../* pass props via window or data-attributes */} />,
      document.getElementById('chat-with-data-root')
    );
</script>


<script>
    // Listen for the Enter key press to submit the form and trigger the send button click
    document.querySelector('textarea').addEventListener('keydown', function(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault(); // Prevent the default behavior (new line)
            document.querySelector('.send-button').click(); // Trigger click on Send button
        }
    });
</script>
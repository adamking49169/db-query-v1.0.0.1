@using Models
@model ChatModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Chat With Data";
}

<style>
html, body {
    margin: 0;
    padding: 0;
    height: 100%;
    width: 100%;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #eef2f7;
    overflow: hidden;
}

.auth-bg {
    position: fixed;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background: url('/images/bg.jpg') no-repeat center center fixed;
    background-size: cover;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 2rem;
    overflow: auto;
}

.auth-card {
    backdrop-filter: blur(10px);
    background-color: rgba(255, 255, 255, 0.95);
    border-radius: 1.5rem;
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.25);
    padding: 3rem 2rem;
    max-width: 800px;
    width: 100%;
    animation: fadeIn 0.4s ease;
}

/* keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to   { opacity: 1; transform: translateY(0); }
} */

.container {
    display: flex;
    gap: 1.5rem;
}

.sidebar {
    width: 25%;
    max-height: 70vh;
    overflow-y: auto;
}

.history-item {
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    background-color: #f4f4f4;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: background 0.2s;
}
.history-item:hover {
    background-color: #e2e3e5;
}

.main-content {
    width: 75%;
    display: flex;
    flex-direction: column;
}

.chat-header {
    text-align: center;
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
}

.chat-input {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}
.chat-input textarea {
    width: 100%;
    height: 140px;
    border: none;
    border-radius: 1rem;
    padding: 1.25rem;
    font-size: 1.125rem;
    background-color: #f9fafb;
    box-shadow: inset 0 2px 6px rgba(0, 0, 0, 0.06);
    resize: vertical;
    transition: box-shadow 0.3s, background-color 0.3s;
}
.chat-input textarea:focus {
    outline: none;
    background-color: #ffffff;
    box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.25);
}
.chat-input textarea::placeholder {
    color: #9ca3af;
    font-style: italic;
}
.chat-input button {
    padding: 0.75rem;
    background: linear-gradient(90deg, #0066ff, #0099ff);
    border: none;
    border-radius: 50rem;
    color: #fff;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.2s;
}
.chat-input button:hover {
    background-color: #1e50c3;
    transform: scale(1.02);
}

.chat-history-header {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 2rem 0 1rem;
    text-align: center;
}

.chat-history {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-height: 300px;
    overflow-y: auto;
}

.chat-message {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
}

.chat-bubble {
    padding: 1rem;
    border-radius: 1rem;
    max-width: 80%;
    position: relative;
    word-wrap: break-word;
    display: flex;
    flex-direction: column;
}
.user-message {
    align-self: flex-end;
    background-color: #d1e7dd;
    color: #0f5132;
    text-align: right;
}
.assistant-message {
    align-self: flex-start;
    background-color: #e2e3e5;
    color: #41464b;
    text-align: left;
}

.avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    color: #fff;
    font-size: 1rem;
}
.avatar.user { background-color: #198754; }
.avatar.assistant { background-color: #0d6efd; }

.chat-meta {
    font-size: 0.75rem;
    color: #666;
    margin-top: 0.25rem;
}

.separator {
    text-align: center;
    margin: 1rem 0;
}
.separator hr {
    border: none;
    height: 1px;
    background-color: #dee2e6;
    margin: 0;
}

.table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1.5rem;
}
.table th,
.table td {
    padding: 0.75rem;
    border: 1px solid #dee2e6;
    text-align: left;
}
.table th { background-color: #f8f9fa; }
</style>

<div class="auth-bg">
    <div class="auth-card container">
        <div class="sidebar">
            <h3>Previous Chats</h3>
            @if (Model.PreviousChats?.Any() == true)
            {
                foreach (var prevChat in Model.PreviousChats)
                {
                    <div class="history-item">
                        @prevChat.Title (@prevChat.Date.ToLocalTime().ToString("d"))
                    </div>
                }
            }
            else
            {
                <div>No previous chats available.</div>
            }
        </div>

        <div class="main-content">
            <div class="chat-header">Chat With Data</div>

            <form method="post" asp-action="ChatWithData" asp-controller="Chat" class="chat-input">
                <textarea name="UserInput" placeholder="Ask a question..." required></textarea>
                @* Preserve history inputs *@
                @if (Model.ChatHistory != null)
                {
                    for (var i = 0; i < Model.ChatHistory.Count; i++)
                    {
                        <input type="hidden" name="ChatHistory[@i].Role" value="@Model.ChatHistory[i].Role" />
                        <input type="hidden" name="ChatHistory[@i].Content" value="@Model.ChatHistory[i].Content" />
                        <input type="hidden" name="ChatHistory[@i].Timestamp" value="@Model.ChatHistory[i].Timestamp.ToString("o")" />
                    }
                }
                <button type="submit">Send</button>
            </form>

            @if (Model.ChatHistory?.Any() == true)
            {
                <div class="chat-history-header">Chat History</div>
                <ul class="chat-history">
                    @for (var i = 0; i < Model.ChatHistory.Count; i += 2)
                    {
                        var user = Model.ChatHistory[i];
                        var assistant = (i + 1 < Model.ChatHistory.Count) ? Model.ChatHistory[i + 1] : null;
                        <li class="chat-message">
                            <div class="avatar user">U</div>
                            <div class="chat-bubble user-message">
                                <span>@user.Content</span>
                                <div class="chat-meta">@user.Role • @user.Timestamp.ToLocalTime().ToString("g")</div>
                            </div>
                        </li>
                        @if (assistant != null)
                        {
                            <li class="chat-message">
                                <div class="avatar assistant">A</div>
                                <div class="chat-bubble assistant-message">
                                    <span>@assistant.Content</span>
                                    <div class="chat-meta">@assistant.Role • @assistant.Timestamp.ToLocalTime().ToString("g")</div>
                                </div>
                            </li>
                        }
                        <li class="separator"><hr class="chat-separator" /></li>
                    }
                </ul>
            }

            @if (Model.Data?.Any() == true)
            {
                <div class="chat-history-header">Data Output</div>
                <table class="table">
                    <thead>
                        <tr><th>Column</th><th>Value</th></tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model.Data)
                        {
                            <tr><td>@row.ColumnName</td><td>@row.Value</td></tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<script>
    var chatBox = document.getElementById("chatScrollArea");
    if (chatBox) chatBox.scrollTop = chatBox.scrollHeight;
</script>

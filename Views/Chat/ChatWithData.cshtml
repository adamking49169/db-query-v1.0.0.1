@using Models
@model ChatModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Chat With Data";
    var user = SignInManager.IsSignedIn(User) ? await UserManager.GetUserAsync(User) : null;
}

<link rel="stylesheet" href="~/css/chatwithdata.css" />

@if (user != null)
{
    <div class="dropdown user-avatar-topright">
        <a href="#" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            <img src="https://ui-avatars.com/api/?name=@user.FirstName+@user.LastName&background=0D8ABC&color=fff"
                 alt="Avatar"
                 class="user-avatar" />
        </a>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
            <li><a class="dropdown-item" href="@Url.Action("Settings","Account")">Settings</a></li>
            <li><a class="dropdown-item" href="@Url.Action("Upgrade","Account")">Upgrade Plan</a></li>
            <li><hr class="dropdown-divider" /></li>
            <li>
                <form asp-controller="Account" asp-action="Logout" method="post" class="m-0">
                    <button type="submit" class="dropdown-item">Log out</button>
                </form>
            </li>
        </ul>
    </div>
}

<div class="auth-bg">
    <div class="auth-card container">
        <!-- Button to hide/show sidebar with minimize/maximize icon -->
        <button id="toggleSidebarBtn" class="toggle-sidebar-btn" onclick="toggleSidebar()">
            <i id="toggleIcon" class="fas fa-chevron-left"></i> <!-- Minimize icon initially -->
        </button>


        <div class="sidebar" id="sidebar">
            <h3>Previous Chats</h3>
            <!-- Search bar for filtering chats -->
            <input type="text" id="searchBar" class="search-bar" placeholder="Search previous chats..." onkeyup="searchChats()" />

            @if (Model.PreviousChats.Any())
            {
                var currentUsersPreviousChats = Model.PreviousChats
                .Where(prev => prev.UserIdentityId == user.Id)
                .ToList();

                <!-- Container for displaying previous chats -->
                <div id="chatListContainer">
                    @foreach (var prevChat in currentUsersPreviousChats)
                    {
                        <div class="history-item" onclick="openPreviousChat(@prevChat.Id)" data-title="@prevChat.Title">
                            @prevChat.Title (@prevChat.Date.ToLocalTime().ToString("d"))
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-chats">No previous chats available.</div>
            }
        </div>

        <script>
            function searchChats() {
                const searchTerm = document.getElementById("searchBar").value.toLowerCase();
                const chats = document.querySelectorAll(".history-item");

                chats.forEach(chat => {
                    const title = chat.getAttribute("data-title").toLowerCase();
                    if (title.includes(searchTerm)) {
                        chat.style.display = "block"; // Show the chat if it matches the search term
                    } else {
                        chat.style.display = "none"; // Hide the chat if it doesn't match the search term
                    }
                });
            }

                             function toggleSidebar() {
              const sidebar     = document.getElementById('sidebar');
              const mainContent = document.getElementById('mainContent');
              const toggleBtn   = document.getElementById('toggleSidebarBtn');
              const toggleIcon  = document.getElementById('toggleIcon');
              const container   = document.querySelector('.container');

              // decide whether we're hiding or showing
              const isHidden = sidebar.style.width === '0px' || sidebar.style.width === '';

              if (isHidden) {
                // expand
                sidebar.style.width     = window.innerWidth <= 768 ? '80%' : '25%';
                mainContent.style.width = window.innerWidth <= 768 ? '20%' : '75%';
                toggleBtn.title         = 'Hide Sidebar';
                toggleIcon.classList.replace('fa-chevron-right','fa-chevron-left');
                container.classList.remove('no-gap');
              } else {
                // collapse
                sidebar.style.width     = '0';
                mainContent.style.width = '100%';
                toggleBtn.title         = 'Show Sidebar';
                toggleIcon.classList.replace('fa-chevron-left','fa-chevron-right');
                container.classList.add('no-gap');
              }
            }

            // init + resize
            document.addEventListener('DOMContentLoaded', toggleSidebar);
            window.addEventListener('resize', toggleSidebar);



             function openPreviousChat(chatId) {
                 window.location.href = '@Url.Action("ViewChat", "Chat")?id=' + chatId;
             }

        </script>

        <div class="main-content" id="mainContent">
            <div class="chat-header">Chat With Data</div>
            <form method="post" asp-action="ChatWithData" asp-controller="Chat" class="chat-input">
                <div class="input-container">
                    <textarea id="UserInput" name="UserInput" placeholder="Ask a question..." required></textarea>
                    <button type="submit" class="send-button">Send</button>
                </div>

                @* Preserve history inputs *@
                @if (Model.ChatHistory != null)
                {
                    for (var i = 0; i < Model.ChatHistory.Count; i++)
                    {
                        <input type="hidden" name="ChatHistory[@i].Role" value="@Model.ChatHistory[i].Role" />
                        <input type="hidden" name="ChatHistory[@i].Content" value="@Model.ChatHistory[i].Content" />
                        <input type="hidden" name="ChatHistory[@i].Timestamp" value="@Model.ChatHistory[i].Timestamp.ToString("o")" />
                    }
                }
            </form>
            <script>
                                 // Function to set focus and move the cursor to the start
                function setFocusAndCursor() {
                    const userInput = document.getElementById("UserInput");
                    userInput.focus(); // Focus the textarea
                    // userInput.setSelectionRange(0, 0); // Move the cursor to the start of the text
                }

                // Ensure focus and cursor position when page is loaded
                document.addEventListener('DOMContentLoaded', function() {
                    setFocusAndCursor(); // Set focus and cursor to the start when the page reloads
                });

                // Set focus and cursor position after submitting the form
                document.querySelector("form").addEventListener("submit", function() {
                    setTimeout(function() {
                        setFocusAndCursor();
                    }, 0);
                });

                // Set focus and cursor position after clicking the send button
                document.querySelector('.send-button').addEventListener('click', function() {
                    const userInput = document.getElementById("UserInput");
                    setTimeout(function() {
                        setFocusAndCursor();
                    }, 0);
                });


            </script>

            @if (Model.ChatHistory?.Any() == true)
            {
                <div class="chat-history-header">Chat History</div>
                <ul class="chat-history">
                    @{
                        var pairs = Model.ChatHistory
                        .Select((msg, idx) => new { msg, idx })
                        .GroupBy(x => x.idx / 2)
                        .Select(g => new
                        {
                            User = g.First().msg,
                            Assistant = g.Skip(1).FirstOrDefault()?.msg
                        })
                        .ToList();

                        pairs.Reverse();
                    }

                    @foreach (var p in pairs)
                    {
                        <!-- User message -->
                        <li class="chat-message">
                            <div class="avatar user">@user.FirstName[0]@user.LastName[0]</div>
                            <div class="chat-bubble user-message">
                                <span>@p.User.Content</span>
                                <div class="chat-meta">
                                    @p.User.Role • @p.User.Timestamp.ToLocalTime().ToString("g")
                                </div>
                            </div>
                        </li>

                        @if (p.Assistant != null)
                        {
                            <!-- Assistant message -->
                            <li class="chat-message">
                                <img src="/images/navbar-brand.png"
                                     alt="Assistant Avatar"
                                     class="avatar assistant" />
                                <div class="chat-bubble assistant-message">
                                    <span>@p.Assistant.Content</span>

                                    @if (!string.IsNullOrWhiteSpace(p.Assistant.ImageUrl))
                                    {
                                        <div class="assistant-image">
                                            <img src="@p.Assistant.ImageUrl" alt="Assistant sent image" />
                                        </div>
                                    }

                                    <div class="chat-meta">
                                        @p.Assistant.Role • @p.Assistant.Timestamp.ToLocalTime().ToString("g")
                                    </div>
                                </div>
                            </li>
                        }

                        <li class="separator">
                            <hr class="chat-separator" />
                        </li>
                    }
                </ul>
            }

            @if (Model.Data?.Any() == true)
            {
                <div class="chat-history-header">Data Output</div>
                <table class="table">
                    <thead>
                        <tr><th>Column</th><th>Value</th></tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model.Data)
                        {
                            <tr><td>@row.ColumnName</td><td>@row.Value</td></tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<script>
    // Listen for the Enter key press to submit the form and trigger the send button click
    document.querySelector('textarea').addEventListener('keydown', function(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault(); // Prevent the default behavior (new line)
            document.querySelector('.send-button').click(); // Trigger click on Send button
        }
    });
</script>


@using Models
@model ChatModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Chat With Data";
    var user = SignInManager.IsSignedIn(User)
        ? await UserManager.GetUserAsync(User)
        : null;
}

<link rel="stylesheet" href="~/css/chatwithdata.css" />

@if (user != null)
{
    <div class="dropdown user-avatar-topright">
        <a href="#" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            <img src="https://ui-avatars.com/api/?name=@user.FirstName+@user.LastName&background=0D8ABC&color=fff"
                 alt="Avatar"
                 class="user-avatar" />
        </a>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
            <li><a class="dropdown-item" href="@Url.Action("Settings", "Account")">Settings</a></li>
            <li><a class="dropdown-item" href="@Url.Action("Upgrade", "Account")">Upgrade Plan</a></li>
            <li><hr class="dropdown-divider" /></li>
            <li>
                <form asp-controller="Account" asp-action="Logout" method="post" class="m-0">
                    <button type="submit" class="dropdown-item">Log out</button>
                </form>
            </li>
        </ul>
    </div>
}

<div class="auth-bg">
    <div class="auth-card container">
        <!-- Sidebar -->
        <div class="sidebar" id="sidebar">
            <div class="sidebar-top-controls">
                <button id="toggleSidebarBtn" class="toggle-sidebar-btn" onclick="toggleSidebar()">
                    <i id="toggleIcon" class="fas fa-chevron-left"></i>
                </button>

                <input type="text"
                       id="searchBar"
                       class="search-bar"
                       placeholder="Search previous chats..."
                       onkeyup="searchChats()" />
            </div>

            @if (Model.PreviousChats.Any())
            {
                <div id="chatListContainer">
                    @foreach (var chat in Model.PreviousChats.Where(c => c.UserIdentityId == user.Id))
                    {
                        <div class="history-item"
                             data-title="@chat.Title"
                             onclick="openPreviousChat(@chat.Id)">
                            @chat.Title (@chat.Date.ToLocalTime().ToString("d"))
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-chats">No previous chats available.</div>
            }
        </div>

        <!-- Main Content -->
        <div class="main-content" id="mainContent">
            @* <h2 class="chat-header">Chat With Data</h2> *@

            <!-- Image Upload Form -->
            <form method="post"
                  asp-action="ChatWithData"
                  asp-controller="Chat"
                  enctype="multipart/form-data"
                  class="chat-input">

                <div class="input-container">
                    <!-- new wrapper around textarea + label -->
                    <div class="textarea-wrapper">
                        <textarea id="UserInput"
                                  name="UserInput"
                                  placeholder="Ask a question..."
                                  required></textarea>

                        <label for="imageFile"
                               class="file-label"
                               aria-label="Attach an image">  <img src="/images/uploadfilepng.png" /> </label>
                    </div>

                    <!-- hidden file picker -->
                    <input type="file"
                           id="imageFile"
                           name="file"
                           accept="image/*"
                           class="file-input" />

                    <!-- send button moves here -->
                    <button type="submit" class="send-button">Send</button>

                <!-- Preserve Chat History -->
                @if (Model.ChatHistory != null)
                {
                    @for (int i = 0; i < Model.ChatHistory.Count; i++)
                    {
                        <input type="hidden"
                               name="ChatHistory[@i].Role"
                               value="@Model.ChatHistory[i].Role" />
                        <input type="hidden"
                               name="ChatHistory[@i].Content"
                               value="@Model.ChatHistory[i].Content" />
                        <input type="hidden"
                               name="ChatHistory[@i].Timestamp"
                               value="@Model.ChatHistory[i].Timestamp.ToString("o")" />
                    }
                }
                </div>
            </form>

            <!-- Image Analysis Result -->
            <div id="imageAnalysisResult" class="analysis-result"></div>

            <!-- Chat History -->
            @if (Model.ChatHistory?.Any() == true)
            {
                <h3 class="chat-history-header">Chat History</h3>
                <ul class="chat-history">
                    @{
                        var pairs = Model.ChatHistory
                        .Select((msg, idx) => new { msg, idx })
                        .GroupBy(x => x.idx / 2)
                        .Select(g => new
                        {
                            User = g.First().msg,
                            Assistant = g.Skip(1).FirstOrDefault()?.msg
                        })
                        .Reverse()
                        .ToList();
                    }

                    @foreach (var p in pairs)
                    {
                        <li class="chat-message">
                            <div class="avatar user">
                                @user.FirstName[0]@user.LastName[0]
                            </div>
                            <div class="chat-bubble user-message">
                                <span>@p.User.Content</span>
                                <div class="chat-meta">
                                    @p.User.Role • @p.User.Timestamp.ToLocalTime().ToString("g")
                                </div>
                            </div>
                        </li>

                        @if (p.Assistant != null)
                        {
                            <li class="chat-message">
                                <img src="/images/navbar-brand.png"
                                     alt="Assistant Avatar"
                                     class="avatar assistant" />
                                <div class="chat-bubble assistant-message">
                                    <span>@p.Assistant.Content</span>

                                    @if (!string.IsNullOrWhiteSpace(p.Assistant.ImageUrl))
                                    {
                                        <div class="assistant-image">
                                            <img src="@p.Assistant.ImageUrl" alt="Assistant sent image" />
                                        </div>
                                    }

                                    <div class="chat-meta">
                                        @p.Assistant.Role • @p.Assistant.Timestamp.ToLocalTime().ToString("g")
                                    </div>
                                </div>
                            </li>
                        }

                        <li class="separator"><hr class="chat-separator" /></li>
                    }
                </ul>
            }

            <!-- Data Output -->
            @if (Model.Data?.Any() == true)
            {
                <h3 class="chat-history-header">Data Output</h3>
                <table class="table">
                    <thead>
                        <tr><th>Column</th><th>Value</th></tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model.Data)
                        {
                            <tr>
                                <td>@row.ColumnName</td>
                                <td>@row.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Sidebar setup
            initSidebar();
            setFocus();

            // Send on Enter (without Shift)
            document.getElementById('UserInput').addEventListener('keydown', e => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    document.querySelector('.send-button').click();
                }
            });

            // IMAGE AUTO-ANALYSIS
            const fileInput = document.getElementById('imageFile');
            const resultDiv  = document.getElementById('imageAnalysisResult');

            async function analyzeImage(file) {
                resultDiv.innerText = 'Analyzing image, please wait…';
                const form = new FormData();
                form.append('file', file);

                try {
                    const res = await fetch('/api/image/extract-and-process', {
                        method: 'POST',
                        body: form
                    });
                    if (!res.ok) throw new Error('Image analysis failed.');

                    const { extractedText, chatGptResponse } = await res.json();
                    resultDiv.innerHTML = `
                        <li class="chat-message">
                            <img src="/images/navbar-brand.png" alt="Assistant Avatar" class="avatar assistant" />
                            <div class="chat-bubble assistant-message">
                                <strong>ChatGPT Response:</strong><br>${chatGptResponse}
                                <div class="chat-meta">
                                    Assistant • ${new Date().toLocaleString()}
                                </div>
                            </div>
                        </li>`;
                } catch (err) {
                    resultDiv.innerText = 'Error: ' + err.message;
                }
            }

            // Listen for file selection and kick off analysis
            fileInput.addEventListener('change', () => {
                if (fileInput.files.length) {
                    analyzeImage(fileInput.files[0]);
                } else {
                    resultDiv.innerText = 'Please select an image file.';
                }
            });
        });

        // OPTIONAL: if your initSidebar, toggleSidebar, openPreviousChat, etc.
        // are defined elsewhere, leave them. Otherwise include them here:

        function initSidebar() {
            const sidebar = document.getElementById('sidebar');
            const main    = document.getElementById('mainContent');
            const icon    = document.getElementById('toggleIcon');
            const mobile  = window.innerWidth <= 768;

            if (mobile) {
                sidebar.style.width = '0';
                main.style.width    = '100%';
                icon.classList.replace('fa-chevron-left','fa-chevron-right');
            } else {
                sidebar.style.width = '25%';
                main.style.width    = '75%';
                icon.classList.replace('fa-chevron-right','fa-chevron-left');
            }
        }

        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const main    = document.getElementById('mainContent');
            const icon    = document.getElementById('toggleIcon');
            const mobile  = window.innerWidth <= 768;
            const hidden  = sidebar.offsetWidth === 0;

            if (hidden) {
                sidebar.style.width = mobile ? '100%' : '25%';
                main.style.display  = mobile ? 'none' : 'flex';
                icon.classList.replace('fa-chevron-right','fa-chevron-left');
            } else {
                sidebar.style.width = '0';
                main.style.display   = 'flex';
                main.style.width     = '100%';
                icon.classList.replace('fa-chevron-left','fa-chevron-right');
            }
        }

        function openPreviousChat(id) {
            window.location.href = '@Url.Action("ViewChat", "Chat")?id=' + id;
        }

        function setFocus() {
            document.getElementById('UserInput').focus();
        }
    </script>
}
